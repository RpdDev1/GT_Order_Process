<Activity mc:Ignorable="sap sap2010" x:Class="Copy_Data_from_Permanent" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_InputFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_PermanentSheet" Type="InArgument(x:String)" />
    <x:Property Name="in_FileName" Type="InArgument(x:String)" />
    <x:Property Name="in_Rowcount" Type="OutArgument(x:Int32)" />
    <x:Property Name="in_CopyPasteRange" Type="InArgument(x:String)" />
    <x:Property Name="in_ExcelColumncount" Type="InArgument(x:Int32)" />
    <x:Property Name="in_NewExcelRowcount" Type="OutArgument(x:Int32)" />
    <x:Property Name="in_Exception" Type="OutArgument(x:String)" />
    <x:Property Name="in_NewFileName" Type="InArgument(x:String)" />
    <x:Property Name="in_OutputFilePath" Type="InArgument(x:String)" />
    <x:Property Name="in_NewPermanentSheet" Type="InArgument(x:String)" />
    <x:Property Name="in_OMS_ExcludedFile" Type="InArgument(x:String)" />
  </x:Members>
  <sap:VirtualizedContainerService.HintSize>1514,3514</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ActivityBuilder_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Data</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Excel.Model</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Drawing.Common</AssemblyReference>
      <AssemblyReference>System.Drawing.Primitives</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>UiPath.Testing.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.ViewModels</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>System.Linq.Async.Queryable</AssemblyReference>
      <AssemblyReference>System.Linq.Expressions</AssemblyReference>
      <AssemblyReference>System.Linq.Parallel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Linq.Queryable</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.Collections.NonGeneric</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="Go to the &quot;Permanent&quot; worksheet and select columns A to I. &amp; Copy the selected columns." DisplayName="Go to the &quot;Permanent&quot; worksheet and select columns A to I. &amp; Copy the selected columns." sap:VirtualizedContainerService.HintSize="670,3449" sap2010:WorkflowViewState.IdRef="Sequence_18">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:Int32" Name="int_RetryCount" />
      <Variable x:TypeArguments="x:Int32" Name="int_MaxRetries" />
      <Variable x:TypeArguments="x:Boolean" Name="bool_WriteSuccessful" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="608,141" sap2010:WorkflowViewState.IdRef="LogMessage_2" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Exclusion Master Processing : Step 4 &amp; 5 execution started &quot;]" />
    <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Fetching rowcount of Exclusion Master file " Code="Dim excelApp As Microsoft.Office.Interop.Excel.Application&#xA;Dim excelWorkbook As Microsoft.Office.Interop.Excel.Workbook&#xA;Dim excelWorksheet As Microsoft.Office.Interop.Excel.Worksheet&#xA;&#xA;excelApp = New Microsoft.Office.Interop.Excel.ApplicationClass()&#xA;excelWorkbook = excelApp.Workbooks.Open(System.IO.Path.GetFullPath(FilePath))&#xA;excelWorksheet = CType(excelWorkbook.Sheets(SheetName), Microsoft.Office.Interop.Excel.Worksheet)&#xA;&#xA;' ' Check if the worksheet contains data using LINQ&#xA;Dim dataRange = excelWorksheet.UsedRange&#xA;Dim rowCount As Integer = dataRange.Rows.Count&#xA;FileRowCount = rowCount&#xA;' Print the row count using the Log Message activity&#xA;Console.WriteLine(&quot;Number of rows with data: &quot; &amp; rowCount.ToString())&#xA;excelWorkbook.Close()&#xA;excelApp.Quit()" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="608,196" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="x:String" x:Key="SheetName">[in_PermanentSheet]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="FilePath">[in_InputFilePath+in_FileName]</InArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="FileRowCount">[in_Rowcount]</OutArgument>
      </ui:InvokeCode.Arguments>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InvokeCode>
    <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="608,163" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
      <ui:MultipleAssign.AssignOperations>
        <scg:List x:TypeArguments="ui:AssignOperation" Capacity="4">
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Int32">[int_RetryCount]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Int32">0</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Int32">[int_MaxRetries]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Int32">3</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
          <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_11">
            <ui:AssignOperation.To>
              <OutArgument x:TypeArguments="x:Boolean">[bool_WriteSuccessful]</OutArgument>
            </ui:AssignOperation.To>
            <ui:AssignOperation.Value>
              <InArgument x:TypeArguments="x:Boolean">False</InArgument>
            </ui:AssignOperation.Value>
          </ui:AssignOperation>
        </scg:List>
      </ui:MultipleAssign.AssignOperations>
    </ui:MultipleAssign>
    <ui:InterruptibleDoWhile CurrentIndex="{x:Null}" Condition="[Not (int_RetryCount &lt; int_MaxRetries andalso bool_WriteSuccessful)]" DisplayName="Do While" sap:VirtualizedContainerService.HintSize="608,2312" sap2010:WorkflowViewState.IdRef="InterruptibleDoWhile_1">
      <ui:InterruptibleDoWhile.Body>
        <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="572,2146" sap2010:WorkflowViewState.IdRef="Sequence_38">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" sap2010:Annotation.AnnotationText="Go to the &quot;Permanent&quot; worksheet and select columns A to I" Code="' Variables&#xA;Dim excelApp As Microsoft.Office.Interop.Excel.Application = New Microsoft.Office.Interop.Excel.Application()&#xA;Dim sourceWorkbook As Microsoft.Office.Interop.Excel.Workbook = Nothing&#xA;Dim sourceWorksheet As Microsoft.Office.Interop.Excel.Worksheet = Nothing&#xA;Dim targetWorkbook As Microsoft.Office.Interop.Excel.Workbook = Nothing&#xA;Dim targetWorksheet As Microsoft.Office.Interop.Excel.Worksheet = Nothing&#xA;&#xA;Try&#xA;    ' Specify the file path and sheet name for the source Excel file&#xA;    Dim sourceFilePath As String = System.IO.Path.GetFullPath(Filepath)&#xA;    Dim sourceSheetName As String = SheetName ' Change to your source sheet name&#xA;&#xA;    ' Specify the file path for the target Excel file&#xA;    Dim targetFilePath As String = System.IO.Path.GetFullPath(NewFilePath)&#xA;    &#xA;    ' Open the source Excel file&#xA;    sourceWorkbook = excelApp.Workbooks.Open(sourceFilePath)&#xA;    sourceWorksheet = CType(sourceWorkbook.Sheets(sourceSheetName), Microsoft.Office.Interop.Excel.Worksheet)&#xA;&#xA;    ' Check if the source worksheet has columns A to J&#xA;    Dim columnCount As Integer = sourceWorksheet.UsedRange.Columns.Count&#xA;    Console.WriteLine(columnCount.ToString())&#xA;    If columnCount &gt;= ExcelColumncount Then&#xA;        Console.WriteLine(&quot;A to I range columns are present.&quot;)&#xA;        &#xA;        ' Open the target Excel file&#xA;        targetWorkbook = excelApp.Workbooks.Open(targetFilePath)&#xA;&#xA;        ' Create a new worksheet named &quot;Permanent&quot; as the second sheet&#xA;        targetWorksheet = CType(targetWorkbook.Sheets.Add(, targetWorkbook.Sheets(1)), Microsoft.Office.Interop.Excel.Worksheet)&#xA;        targetWorksheet.Name = NewFileSheetName&#xA;&#xA;        ' Copy data from columns A to J in the source worksheet&#xA;        sourceWorksheet.Range(CopyPasteRange).Copy()&#xA;&#xA;        ' Paste data into the target worksheet&#xA;        targetWorksheet.Paste()&#xA;&#xA;        ' Get the pasted row count in the target worksheet&#xA;        Dim rowCount As Integer = targetWorksheet.UsedRange.Rows.Count&#xA;        FileRowCount = rowCount&#xA;&#xA;        ' Save the target workbook with the changes&#xA;        targetWorkbook.Save()&#xA;&#xA;        ' Display the pasted row count&#xA;        Console.WriteLine(&quot;Pasted Row Count: &quot; &amp; rowCount.ToString())&#xA;        &#xA;    Else&#xA;        Throw New BusinessRuleException(&quot;A to I range columns are not present.&quot;)&#xA;    End If&#xA;&#xA;Catch ex As BusinessRuleException&#xA;    Console.WriteLine(&quot;Error: &quot; &amp; ex.Message)&#xA;Catch ex As Exception&#xA;    Console.WriteLine(&quot;Error: &quot; &amp; ex.Message)&#xA;    out_Exception = ex.Message&#xA;&#xA;Finally&#xA;    ' Clean up resources&#xA;    targetWorksheet = Nothing&#xA;    If sourceWorkbook IsNot Nothing Then&#xA;        sourceWorkbook.Close(SaveChanges:=False)&#xA;    End If&#xA;    sourceWorksheet = Nothing&#xA;    If targetWorkbook IsNot Nothing Then&#xA;        targetWorkbook.Close(SaveChanges:=True) ' Save changes to the target workbook&#xA;    End If&#xA;    excelApp.Quit()&#xA;End Try&#xA;" DisplayName="Invoke Code" sap:VirtualizedContainerService.HintSize="510,207" sap2010:WorkflowViewState.IdRef="InvokeCode_2">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="Filepath">[in_InputFilePath+in_FileName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="SheetName">[in_PermanentSheet]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="NewFilePath">[in_OutputFilePath+in_NewFileName]</InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="CopyPasteRange">[in_CopyPasteRange]</InArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="ExcelColumncount">[in_ExcelColumncount]</OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="out_Exception">[in_Exception]</OutArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="FileRowCount">[in_NewExcelRowcount]</OutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="NewFileSheetName">[in_NewPermanentSheet]</InArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
          <If sap2010:Annotation.AnnotationText="Verfying if any exception occur or not" Condition="[in_Exception &lt;&gt; Nothing]" sap:VirtualizedContainerService.HintSize="510,391" sap2010:WorkflowViewState.IdRef="If_5">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,178" sap2010:WorkflowViewState.IdRef="Sequence_32">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Throw Exception="[new BusinessRuleException(in_Exception)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_5" />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap2010:WorkflowViewState.IdRef="Sequence_33" />
            </If.Else>
          </If>
          <If sap2010:Annotation.AnnotationText="Verifying able to paste A to I columns to new excel file succesfully or not" Condition="[in_NewExcelRowcount = in_Rowcount]" sap:VirtualizedContainerService.HintSize="510,915" sap2010:WorkflowViewState.IdRef="If_6">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="476,351" sap2010:WorkflowViewState.IdRef="Sequence_34">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_3">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Boolean">[bool_WriteSuccessful]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,141" sap2010:WorkflowViewState.IdRef="LogMessage_8" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Copy columns A to I from Permanent Sheet in the exclusion master and pasted into a new Excel files &quot;+in_NewFileName]" />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="476,351" sap2010:WorkflowViewState.IdRef="Sequence_35">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_4">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">[int_RetryCount]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">[int_RetryCount+1]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="434,141" sap2010:WorkflowViewState.IdRef="LogMessage_9" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Retrying Attempt &quot; + (int_RetryCount + 1).ToString]" />
              </Sequence>
            </If.Else>
          </If>
          <If sap2010:Annotation.AnnotationText="No data or columns found even after retries. Throwing business exception." Condition="[int_RetryCount &gt;= int_MaxRetries]" sap:VirtualizedContainerService.HintSize="510,402" sap2010:WorkflowViewState.IdRef="If_7">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,178" sap2010:WorkflowViewState.IdRef="Sequence_36">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Throw Exception="[new BusinessRuleException(&quot;Data or columns not found after 3 retries.&quot;)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_6" />
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence sap:VirtualizedContainerService.HintSize="300,80" sap2010:WorkflowViewState.IdRef="Sequence_37">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
      </ui:InterruptibleDoWhile.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:InterruptibleDoWhile>
    <ui:CopyFile ContinueOnError="{x:Null}" Destination="[in_OMS_ExcludedFile]" DisplayName="Copy File" sap:VirtualizedContainerService.HintSize="608,154" sap2010:WorkflowViewState.IdRef="CopyFile_1" Overwrite="True" Path="[in_OutputFilePath+in_NewFileName]" />
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="608,141" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="[UiPath.Core.Activities.LogLevel.Info]" Message="[&quot;Exclusion Master Processing : Step 4 &amp; 5 execution ended &quot;]" />
  </Sequence>
</Activity>